# NeuroCluster Streamer API - Kubernetes Secrets Template
# ======================================================
# Template for application secrets - replace with actual values before deployment
# 
# SECURITY WARNING: This is a template file. 
# - Do NOT commit actual secret values to version control
# - Use external secret management (HashiCorp Vault, AWS Secrets Manager, etc.)
# - Generate strong passwords before deployment
#
# Generate secrets:
#   kubectl create secret generic ncs-api-secrets \
#     --from-literal=secret-key="$(openssl rand -base64 32)" \
#     --from-literal=postgres-password="$(openssl rand -base64 16)" \
#     --from-literal=redis-password="$(openssl rand -base64 16)" \
#     --namespace=ncs-api

apiVersion: v1
kind: Secret
metadata:
  name: ncs-api-secrets
  namespace: ncs-api
  labels:
    app.kubernetes.io/name: ncs-api
    app.kubernetes.io/component: secrets
    app.kubernetes.io/version: "1.0.0"
type: Opaque
data:
  # JWT Secret Key (base64 encoded)
  # Generate: echo -n "$(openssl rand -base64 32)" | base64
  secret-key: REPLACE_WITH_BASE64_ENCODED_SECRET_KEY
  
  # API Keys (comma-separated, base64 encoded)
  # Generate: echo -n "api-key-1,api-key-2" | base64
  api-keys: REPLACE_WITH_BASE64_ENCODED_API_KEYS
  
  # CORS Allowed Origins (base64 encoded)
  # Example: echo -n "https://yourdomain.com,https://api.yourdomain.com" | base64
  allowed-origins: REPLACE_WITH_BASE64_ENCODED_ORIGINS

---
# Database Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: ncs-api
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # PostgreSQL Password (base64 encoded)
  # Generate: echo -n "$(openssl rand -base64 16)" | base64
  postgres-password: REPLACE_WITH_BASE64_ENCODED_POSTGRES_PASSWORD
  
  # Database URL (complete connection string, base64 encoded)
  # Format: postgresql://ncs_prod:PASSWORD@postgres-service:5432/ncs_prod
  database-url: REPLACE_WITH_BASE64_ENCODED_DATABASE_URL

---
# Redis Secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: ncs-api
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Redis Password (base64 encoded)
  # Generate: echo -n "$(openssl rand -base64 16)" | base64
  redis-password: REPLACE_WITH_BASE64_ENCODED_REDIS_PASSWORD
  
  # Redis URL (complete connection string, base64 encoded)
  # Format: redis://:PASSWORD@redis-service:6379/0
  redis-url: REPLACE_WITH_BASE64_ENCODED_REDIS_URL

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: ncs-api
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Grafana Admin Password (base64 encoded)
  grafana-admin-password: REPLACE_WITH_BASE64_ENCODED_GRAFANA_PASSWORD
  
  # Prometheus Basic Auth (if enabled, base64 encoded)
  prometheus-auth: REPLACE_WITH_BASE64_ENCODED_PROMETHEUS_AUTH

---
# TLS Certificates (if using HTTPS)
apiVersion: v1
kind: Secret
metadata:
  name: ncs-api-tls
  namespace: ncs-api
  labels:
    app.kubernetes.io/name: ncs-api
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS Certificate (base64 encoded)
  tls.crt: REPLACE_WITH_BASE64_ENCODED_TLS_CERT
  
  # TLS Private Key (base64 encoded)
  tls.key: REPLACE_WITH_BASE64_ENCODED_TLS_KEY

---
# Example script to generate secrets
# Save as generate-secrets.sh and run before deployment
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-generation-script
  namespace: ncs-api
data:
  generate-secrets.sh: |
    #!/bin/bash
    # Generate secrets for NCS API
    
    echo "Generating secrets for NCS API..."
    
    # Generate secret key
    SECRET_KEY=$(openssl rand -base64 32)
    
    # Generate passwords
    POSTGRES_PASSWORD=$(openssl rand -base64 16)
    REDIS_PASSWORD=$(openssl rand -base64 16)
    GRAFANA_PASSWORD=$(openssl rand -base64 16)
    
    # Generate API keys
    API_KEY1=$(openssl rand -base64 24)
    API_KEY2=$(openssl rand -base64 24)
    
    # Create secrets
    kubectl create secret generic ncs-api-secrets \
      --from-literal=secret-key="$SECRET_KEY" \
      --from-literal=api-keys="$API_KEY1,$API_KEY2" \
      --from-literal=allowed-origins="https://yourdomain.com" \
      --namespace=ncs-api
    
    kubectl create secret generic postgres-secrets \
      --from-literal=postgres-password="$POSTGRES_PASSWORD" \
      --from-literal=database-url="postgresql://ncs_prod:$POSTGRES_PASSWORD@postgres-service:5432/ncs_prod" \
      --namespace=ncs-api
    
    kubectl create secret generic redis-secrets \
      --from-literal=redis-password="$REDIS_PASSWORD" \
      --from-literal=redis-url="redis://:$REDIS_PASSWORD@redis-service:6379/0" \
      --namespace=ncs-api
    
    kubectl create secret generic monitoring-secrets \
      --from-literal=grafana-admin-password="$GRAFANA_PASSWORD" \
      --namespace=ncs-api
    
    echo "Secrets generated successfully!"
    echo "API Key 1: $API_KEY1"
    echo "API Key 2: $API_KEY2"
    echo "Grafana Password: $GRAFANA_PASSWORD"