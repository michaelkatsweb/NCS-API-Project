# NeuroCluster Streamer API - Security Scanning Pipeline
# =====================================================
# 
# Comprehensive security scanning and vulnerability assessment pipeline:
# - Static Application Security Testing (SAST)
# - Dependency vulnerability scanning
# - Container image security scanning
# - Secret detection and prevention
# - License compliance checking
# - Security policy enforcement
# 
# Runs on:
# - All pull requests (blocking)
# - Scheduled daily scans
# - Manual dispatch for ad-hoc scanning
# - Push to security-sensitive branches
#
# Author: NCS API Development Team
# Year: 2025

name: 'Security Scanning'

on:
  # Trigger on pull requests for security validation
  pull_request:
    branches:
      - main
      - develop
      - 'release/*'
    types:
      - opened
      - synchronize
      - reopened
  
  # Trigger on push to security-sensitive branches
  push:
    branches:
      - main
      - develop
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - 'k8s/**'
      - '.github/workflows/**'
  
  # Scheduled daily security scans
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  
  # Manual security scan dispatch
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - sast-only
          - dependencies-only
          - container-only
          - secrets-only
      severity_threshold:
        description: 'Minimum severity level to report'
        required: false
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical

# Global environment variables
env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ncs-api
  TRIVY_VERSION: '0.48.0'

# Security scanning permissions
permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

# Cancel in-progress security scans for the same branch
concurrency:
  group: security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Secret Detection and Prevention
  # =============================================================================
  
  secret-detection:
    name: 'Secret Detection'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      github.event.inputs.scan_type != 'dependencies-only' &&
      github.event.inputs.scan_type != 'container-only' &&
      github.event.inputs.scan_type != 'sast-only'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive secret detection
      
      - name: 'GitLeaks Secret Detection'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: 'TruffleHog Secret Scanning'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: 'Custom Secret Pattern Check'
        run: |
          echo "üîç Checking for custom secret patterns..."
          
          # Define custom patterns for NCS API
          declare -A SECRET_PATTERNS=(
            ["JWT_SECRET"]="jwt_secret|JWT_SECRET"
            ["API_KEYS"]="api[_-]?key|API[_-]?KEY"
            ["DATABASE_PASSWORDS"]="db[_-]?pass|database[_-]?password"
            ["REDIS_AUTH"]="redis[_-]?pass|redis[_-]?auth"
            ["ENCRYPTION_KEYS"]="encrypt[_-]?key|cipher[_-]?key"
            ["PRIVATE_KEYS"]="-----BEGIN.*PRIVATE.*KEY-----"
            ["CLOUD_CREDENTIALS"]="AKIA[0-9A-Z]{16}|ya29\."
          )
          
          found_secrets=false
          
          for pattern_name in "${!SECRET_PATTERNS[@]}"; do
            pattern="${SECRET_PATTERNS[$pattern_name]}"
            echo "Checking for $pattern_name patterns..."
            
            # Exclude test files and allowed patterns
            if grep -rE "$pattern" . \
                --exclude-dir='.git' \
                --exclude-dir='venv' \
                --exclude-dir='__pycache__' \
                --exclude='*.log' \
                --exclude='security-scan.yml' \
                --include='*.py' \
                --include='*.yml' \
                --include='*.yaml' \
                --include='*.json' \
                --include='*.env*' \
                --include='*.conf' \
                --include='*.ini'; then
              
              echo "‚ö†Ô∏è Potential $pattern_name found!"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "‚ùå Potential secrets detected. Please review and remove any hardcoded secrets."
            echo "Use environment variables or secret management systems instead."
            exit 1
          else
            echo "‚úÖ No custom secret patterns detected"
          fi
      
      - name: 'Upload Secret Detection Results'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secret-detection-results
          path: |
            gitleaks-report.json
            trufflehog-output.json
          retention-days: 30

  # =============================================================================
  # Static Application Security Testing (SAST)
  # =============================================================================
  
  sast-scan:
    name: 'SAST Scanning'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      github.event.inputs.scan_type != 'dependencies-only' &&
      github.event.inputs.scan_type != 'container-only' &&
      github.event.inputs.scan_type != 'secrets-only'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 'Install Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety semgrep
      
      - name: 'Bandit Security Linter'
        run: |
          echo "üîç Running Bandit security analysis..."
          bandit -r . \
            -f json \
            -o bandit-report.json \
            --severity-level medium \
            --exclude ./tests,./venv,./build \
            || true
          
          # Generate human-readable report
          bandit -r . \
            -f txt \
            --severity-level medium \
            --exclude ./tests,./venv,./build \
            || true
          
          echo "‚úÖ Bandit scan completed"
      
      - name: 'Semgrep SAST Analysis'
        run: |
          echo "üîç Running Semgrep static analysis..."
          semgrep --config=auto \
            --json \
            --output=semgrep-report.json \
            --severity=WARNING \
            --exclude="tests/" \
            --exclude="venv/" \
            . || true
          
          # Generate SARIF for GitHub Security tab
          semgrep --config=auto \
            --sarif \
            --output=semgrep-results.sarif \
            --severity=WARNING \
            --exclude="tests/" \
            --exclude="venv/" \
            . || true
          
          echo "‚úÖ Semgrep scan completed"
      
      - name: 'Upload SARIF Results'
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep-results.sarif
      
      - name: 'Custom Security Rules Check'
        run: |
          echo "üîç Checking custom security rules for NCS API..."
          
          security_issues=0
          
          # Check for hardcoded IPs
          if grep -rE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" . \
              --include="*.py" \
              --exclude-dir="tests" \
              --exclude="security-scan.yml"; then
            echo "‚ö†Ô∏è Hardcoded IP addresses found"
            ((security_issues++))
          fi
          
          # Check for SQL injection vulnerabilities
          if grep -rE "(execute|cursor|query).*%s|\.format\(" . \
              --include="*.py" \
              --exclude-dir="tests"; then
            echo "‚ö†Ô∏è Potential SQL injection patterns found"
            ((security_issues++))
          fi
          
          # Check for eval/exec usage
          if grep -rE "\b(eval|exec)\(" . \
              --include="*.py" \
              --exclude-dir="tests"; then
            echo "‚ö†Ô∏è Dangerous eval/exec usage found"
            ((security_issues++))
          fi
          
          # Check for debug mode in production
          if grep -rE "debug\s*=\s*True|DEBUG\s*=\s*True" . \
              --include="*.py" \
              --exclude-dir="tests" \
              --exclude="config.py"; then
            echo "‚ö†Ô∏è Debug mode enabled in production code"
            ((security_issues++))
          fi
          
          # Check for missing input validation
          if grep -rE "request\.(form|args|json)" . \
              --include="*.py" \
              --exclude-dir="tests" | \
              grep -v -E "(validate|schema|pydantic)"; then
            echo "‚ö†Ô∏è Potential missing input validation"
            ((security_issues++))
          fi
          
          if [ $security_issues -gt 0 ]; then
            echo "‚ùå $security_issues security issues found. Please review."
            exit 1
          else
            echo "‚úÖ Custom security rules passed"
          fi
      
      - name: 'Upload SAST Results'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sast-results
          path: |
            bandit-report.json
            semgrep-report.json
            semgrep-results.sarif
          retention-days: 30

  # =============================================================================
  # Dependency Vulnerability Scanning
  # =============================================================================
  
  dependency-scan:
    name: 'Dependency Vulnerability Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      github.event.inputs.scan_type != 'sast-only' &&
      github.event.inputs.scan_type != 'container-only' &&
      github.event.inputs.scan_type != 'secrets-only'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 'Install Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
      
      - name: 'Safety Vulnerability Check'
        run: |
          echo "üîç Running Safety vulnerability scan..."
          safety check \
            --json \
            --output safety-report.json \
            --continue-on-error || true
          
          # Generate human-readable report
          safety check --full-report || true
          
          echo "‚úÖ Safety scan completed"
      
      - name: 'Pip-Audit Vulnerability Check'
        run: |
          echo "üîç Running pip-audit vulnerability scan..."
          pip-audit \
            --format=json \
            --output=pip-audit-report.json \
            --require requirements.txt || true
          
          # Generate human-readable report
          pip-audit --require requirements.txt || true
          
          echo "‚úÖ Pip-audit scan completed"
      
      - name: 'OSV Scanner'
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --output=osv-results.json
            --format=json
            ./
        continue-on-error: true
      
      - name: 'Dependency License Check'
        run: |
          echo "üîç Checking dependency licenses..."
          pip install pip-licenses
          
          # Check for problematic licenses
          pip-licenses \
            --format=json \
            --output-file=licenses-report.json
          
          # Define allowed licenses (customize as needed)
          allowed_licenses=(
            "MIT License"
            "Apache Software License"
            "BSD License"
            "Python Software Foundation License"
            "Mozilla Public License 2.0 (MPL 2.0)"
            "ISC License (ISCL)"
          )
          
          # Check for non-allowed licenses
          problematic_found=false
          while IFS= read -r license_info; do
            license_name=$(echo "$license_info" | jq -r '.License')
            package_name=$(echo "$license_info" | jq -r '.Name')
            
            if [[ ! " ${allowed_licenses[@]} " =~ " ${license_name} " ]]; then
              echo "‚ö†Ô∏è Potentially problematic license: $package_name ($license_name)"
              problematic_found=true
            fi
          done < <(jq -c '.[]' licenses-report.json)
          
          if [ "$problematic_found" = true ]; then
            echo "‚ùå Problematic licenses found. Please review."
            echo "Consider using alternatives or obtaining proper licensing."
          else
            echo "‚úÖ All dependency licenses are acceptable"
          fi
      
      - name: 'Upload Dependency Scan Results'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json
            osv-results.json
            licenses-report.json
          retention-days: 30

  # =============================================================================
  # Container Security Scanning
  # =============================================================================
  
  container-scan:
    name: 'Container Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      github.event.inputs.scan_type != 'sast-only' &&
      github.event.inputs.scan_type != 'dependencies-only' &&
      github.event.inputs.scan_type != 'secrets-only'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3
      
      - name: 'Build Container Image'
        run: |
          echo "üî® Building container image for security scanning..."
          docker build \
            -t ${{ env.IMAGE_NAME }}:security-scan \
            -f Dockerfile \
            .
      
      - name: 'Trivy Container Vulnerability Scan'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: 'Upload Trivy SARIF Results'
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
      
      - name: 'Trivy JSON Report'
        run: |
          echo "üîç Generating detailed Trivy report..."
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workspace \
            aquasecurity/trivy:${{ env.TRIVY_VERSION }} \
            image \
            --format json \
            --output /workspace/trivy-report.json \
            --severity CRITICAL,HIGH,MEDIUM,LOW \
            ${{ env.IMAGE_NAME }}:security-scan
      
      - name: 'Docker Scout Vulnerability Scan'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: '${{ env.IMAGE_NAME }}:security-scan'
          sarif-file: scout-results.sarif
          summary: true
        continue-on-error: true
      
      - name: 'Container Configuration Security Check'
        run: |
          echo "üîç Checking container security configuration..."
          
          # Check Dockerfile for security best practices
          dockerfile_issues=0
          
          # Check if running as root
          if ! grep -q "USER " Dockerfile; then
            echo "‚ö†Ô∏è Container runs as root (missing USER directive)"
            ((dockerfile_issues++))
          fi
          
          # Check for latest tag usage
          if grep -q "FROM.*:latest" Dockerfile; then
            echo "‚ö†Ô∏è Using 'latest' tag in base image"
            ((dockerfile_issues++))
          fi
          
          # Check for ADD instead of COPY
          if grep -q "^ADD " Dockerfile; then
            echo "‚ö†Ô∏è Using ADD instead of COPY"
            ((dockerfile_issues++))
          fi
          
          # Check for package cache cleanup
          if grep -q "apt-get install" Dockerfile && \
             ! grep -q "apt-get clean\|rm -rf /var/lib/apt/lists" Dockerfile; then
            echo "‚ö†Ô∏è Package cache not cleaned up"
            ((dockerfile_issues++))
          fi
          
          if [ $dockerfile_issues -gt 0 ]; then
            echo "‚ùå $dockerfile_issues Dockerfile security issues found"
            echo "Consider implementing Dockerfile security best practices"
          else
            echo "‚úÖ Dockerfile security check passed"
          fi
      
      - name: 'Upload Container Scan Results'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            trivy-report.json
            scout-results.sarif
          retention-days: 30

  # =============================================================================
  # Security Summary and Reporting
  # =============================================================================
  
  security-summary:
    name: 'Security Summary'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [secret-detection, sast-scan, dependency-scan, container-scan]
    if: always()
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Download All Artifacts'
        uses: actions/download-artifact@v3
        with:
          path: security-reports
      
      - name: 'Generate Security Summary'
        run: |
          echo "üìä Generating comprehensive security summary..."
          
          cat > security-summary.md << 'EOF'
          # üõ°Ô∏è Security Scan Summary
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## üìã Scan Results Overview
          
          | Security Check | Status | Findings |
          |---------------|--------|----------|
          EOF
          
          # Process each security check result
          declare -A scan_results
          
          # Check secret detection results
          if [ -f "security-reports/secret-detection-results/gitleaks-report.json" ]; then
            secret_count=$(jq '. | length' security-reports/secret-detection-results/gitleaks-report.json)
            if [ "$secret_count" -eq 0 ]; then
              scan_results["Secret Detection"]="‚úÖ PASS | No secrets detected"
            else
              scan_results["Secret Detection"]="‚ùå FAIL | $secret_count secrets found"
            fi
          else
            scan_results["Secret Detection"]="‚è≠Ô∏è SKIP | Not executed"
          fi
          
          # Check SAST results
          if [ -f "security-reports/sast-results/bandit-report.json" ]; then
            sast_count=$(jq '[.results[]] | length' security-reports/sast-results/bandit-report.json)
            if [ "$sast_count" -eq 0 ]; then
              scan_results["SAST Analysis"]="‚úÖ PASS | No vulnerabilities detected"
            else
              scan_results["SAST Analysis"]="‚ö†Ô∏è WARN | $sast_count issues found"
            fi
          else
            scan_results["SAST Analysis"]="‚è≠Ô∏è SKIP | Not executed"
          fi
          
          # Check dependency results
          if [ -f "security-reports/dependency-scan-results/safety-report.json" ]; then
            dep_count=$(jq '. | length' security-reports/dependency-scan-results/safety-report.json)
            if [ "$dep_count" -eq 0 ]; then
              scan_results["Dependency Scan"]="‚úÖ PASS | No vulnerable dependencies"
            else
              scan_results["Dependency Scan"]="‚ùå FAIL | $dep_count vulnerable dependencies"
            fi
          else
            scan_results["Dependency Scan"]="‚è≠Ô∏è SKIP | Not executed"
          fi
          
          # Check container results
          if [ -f "security-reports/container-scan-results/trivy-report.json" ]; then
            container_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length' security-reports/container-scan-results/trivy-report.json)
            if [ "$container_count" -eq 0 ]; then
              scan_results["Container Scan"]="‚úÖ PASS | No critical/high vulnerabilities"
            else
              scan_results["Container Scan"]="‚ùå FAIL | $container_count critical/high vulnerabilities"
            fi
          else
            scan_results["Container Scan"]="‚è≠Ô∏è SKIP | Not executed"
          fi
          
          # Add results to summary
          for check in "${!scan_results[@]}"; do
            echo "| $check | ${scan_results[$check]} |" >> security-summary.md
          done
          
          echo "" >> security-summary.md
          echo "## üîç Detailed Findings" >> security-summary.md
          echo "" >> security-summary.md
          echo "For detailed findings, check the individual scan artifacts." >> security-summary.md
          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "*Generated by NCS API Security Pipeline*" >> security-summary.md
          
          cat security-summary.md
      
      - name: 'Comment Security Summary on PR'
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
      
      - name: 'Upload Security Summary'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
      
      - name: 'Security Scan Status Check'
        run: |
          echo "üîç Checking overall security scan status..."
          
          # Determine if any critical security issues were found
          critical_issues=false
          
          # Check for any failed jobs
          if [[ "${{ needs.secret-detection.result }}" == "failure" ]] || \
             [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.container-scan.result }}" == "failure" ]]; then
            critical_issues=true
          fi
          
          if [ "$critical_issues" = true ]; then
            echo "‚ùå Critical security issues detected!"
            echo "Please review the security scan results and address any critical findings."
            exit 1
          else
            echo "‚úÖ Security scan completed successfully"
            echo "No critical security issues detected."
          fi