version: '3.8'

services:
  # Main NCS API service
  ncs-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ncs-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_METRICS=true
      - LOG_LEVEL=INFO
      - WORKERS=4
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - ncs-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ncs-api.rule=Host(`api.ncs.local`)"
      - "traefik.http.services.ncs-api.loadbalancer.server.port=8000"

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: ncs-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - ncs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ncs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ncs-network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ncs-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - ncs-network
    profiles:
      - monitoring

  # Load balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: ncs-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ncs-api
    restart: unless-stopped
    networks:
      - ncs-network
    profiles:
      - loadbalancer

  # Development services
  ncs-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ncs-api-dev
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8000
      - REDIS_URL=redis://redis:6379/1
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    depends_on:
      - redis
    volumes:
      - .:/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ncs-network
    profiles:
      - development

  # Test runner
  ncs-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ncs-tests
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      - redis
    volumes:
      - .:/app
    command: pytest tests/ -v --cov=src --cov-report=html
    networks:
      - ncs-network
    profiles:
      - testing

networks:
  ncs-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

# Override for production deployment
---
# docker-compose.prod.yml
version: '3.8'

services:
  ncs-api:
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - ENVIRONMENT=production
      - WORKERS=8
      - MAX_CLUSTERS=200
      - REQUIRE_API_KEY=true
      - API_KEY=${API_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}

  redis:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10

# Override for development
---
# docker-compose.dev.yml  
version: '3.8'

services:
  ncs-api-dev:
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - RATE_LIMIT_REQUESTS=1000
      - REQUIRE_API_KEY=false
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache