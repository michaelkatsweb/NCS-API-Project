# NeuroCluster Streamer API - Production Dockerfile
# =================================================
# Multi-stage production Docker image for NCS API
#
# This Dockerfile creates an optimized production image with:
# - Security hardening and non-root user
# - Minimal attack surface with distroless base
# - Optimized Python dependencies compilation
# - Health checks and proper signal handling
# - Performance optimizations for FastAPI
#
# Build: docker build -f docker/Dockerfile -t ncs-api:latest .
# Run: docker run -p 8000:8000 ncs-api:latest
#
# Author: NCS API Development Team
# Year: 2025

# =============================================================================
# Stage 1: Build Dependencies
# =============================================================================
FROM python:3.11-slim as builder

# Set environment variables for build optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    gfortran \
    libopenblas-dev \
    liblapack-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Pre-compile Python packages
RUN python -c "import numpy; import numba; import fastapi; import uvicorn"

# =============================================================================
# Stage 2: Production Runtime
# =============================================================================
FROM python:3.11-slim as runtime

# Metadata labels
LABEL org.opencontainers.image.title="NeuroCluster Streamer API" \
      org.opencontainers.image.description="High-performance streaming clustering API" \
      org.opencontainers.image.vendor="NCS Development Team" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/app" \
    PATH="/opt/venv/bin:$PATH" \
    ENVIRONMENT=production \
    HOST=0.0.0.0 \
    PORT=8000 \
    WORKERS=4

# Install runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libopenblas0 \
    libgomp1 \
    curl \
    tini \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r ncsapi && useradd -r -g ncsapi -s /bin/false ncsapi

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create application directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R ncsapi:ncsapi /app

# Copy application code
COPY --chown=ncsapi:ncsapi . /app/

# Remove development and test files
RUN rm -rf /app/tests /app/docker /app/k8s /app/.git* /app/scripts/setup.sh

# Create .env file for container defaults (override with external config)
RUN echo "ENVIRONMENT=production\nHOST=0.0.0.0\nPORT=8000\nWORKERS=4" > /app/.env.container

# Set up Python path and permissions
RUN chmod +x /app/scripts/deploy.sh && \
    find /app -name "*.py" -exec chmod 644 {} \; && \
    chmod -R 755 /app/logs /app/data /app/tmp

# Switch to non-root user
USER ncsapi

# Expose port
EXPOSE 8000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set up entry point with proper signal handling
ENTRYPOINT ["/usr/bin/tini", "--"]

# Default command - can be overridden
CMD ["uvicorn", "main_secure:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-log", \
     "--log-level", "info", \
     "--no-server-header"]

# =============================================================================
# Production Optimization Notes
# =============================================================================
#
# Performance optimizations included:
# - Multi-stage build to reduce final image size
# - Pre-compiled Python packages in virtual environment
# - Optimized BLAS libraries for numpy/numba performance
# - Non-root user for security
# - Tini for proper signal handling
# - Health checks for container orchestration
# - Configurable worker processes
#
# Environment variables for tuning:
# - WORKERS: Number of uvicorn worker processes
# - LOG_LEVEL: Logging level (debug, info, warning, error)
# - SECRET_KEY: JWT secret key (required in production)
# - DATABASE_URL: Database connection string
# - REDIS_URL: Redis connection string
#
# Security features:
# - Non-root user execution
# - Minimal attack surface
# - No package managers in final image
# - Secure signal handling with tini
#
# Usage examples:
# 
# Build:
#   docker build -f docker/Dockerfile -t ncs-api:1.0.0 .
#
# Run with custom config:
#   docker run -d --name ncs-api \
#     -p 8000:8000 \
#     -e SECRET_KEY="your-secret-key" \
#     -e DATABASE_URL="postgresql://..." \
#     -e WORKERS=8 \
#     -v $(pwd)/logs:/app/logs \
#     ncs-api:1.0.0
#
# Run with docker-compose:
#   docker-compose -f docker/docker-compose.prod.yml up -d
#
# =============================================================================